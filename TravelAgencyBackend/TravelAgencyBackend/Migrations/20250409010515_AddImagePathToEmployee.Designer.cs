// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TravelAgencyBackend.Models;

#nullable disable

namespace TravelAgencyBackend.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250409010515_AddImagePathToEmployee")]
    partial class AddImagePathToEmployee
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.14")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("TravelAgencyBackend.Models.Announcement", b =>
                {
                    b.Property<int>("AnnouncementId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AnnouncementId"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<DateTime>("SentAt")
                        .HasColumnType("datetime");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("AnnouncementId");

                    b.HasIndex("EmployeeId");

                    b.ToTable("T_Announcement", (string)null);
                });

            modelBuilder.Entity("TravelAgencyBackend.Models.Attraction", b =>
                {
                    b.Property<int>("AttractionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AttractionId"));

                    b.Property<int>("DistrictId")
                        .HasColumnType("int");

                    b.Property<string>("ScenicSpotName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("TravelSupplierId")
                        .HasColumnType("int");

                    b.HasKey("AttractionId");

                    b.HasIndex("TravelSupplierId");

                    b.HasIndex("DistrictId", "ScenicSpotName")
                        .IsUnique();

                    b.ToTable("T_Attraction", (string)null);
                });

            modelBuilder.Entity("TravelAgencyBackend.Models.Cart", b =>
                {
                    b.Property<int>("CartId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CartId"));

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<int>("ItemId")
                        .HasColumnType("int");

                    b.Property<int>("MemberId")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("CartId");

                    b.HasIndex("MemberId");

                    b.ToTable("T_Cart", (string)null);
                });

            modelBuilder.Entity("TravelAgencyBackend.Models.ChatRoom", b =>
                {
                    b.Property<int>("ChatRoomId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ChatRoomId"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<int>("MemberId")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("ChatRoomId");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("MemberId")
                        .IsUnique();

                    b.ToTable("T_ChatRoom", (string)null);
                });

            modelBuilder.Entity("TravelAgencyBackend.Models.City", b =>
                {
                    b.Property<int>("CityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CityId"));

                    b.Property<string>("CityName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("CityId");

                    b.HasIndex("CityName")
                        .IsUnique();

                    b.ToTable("S_City", (string)null);
                });

            modelBuilder.Entity("TravelAgencyBackend.Models.Content", b =>
                {
                    b.Property<int>("ContentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ContentId"));

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<int>("CustomTravelId")
                        .HasColumnType("int");

                    b.Property<int>("Day")
                        .HasColumnType("int");

                    b.Property<string>("HotelName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("ItemId")
                        .HasColumnType("int");

                    b.Property<TimeSpan>("Time")
                        .HasColumnType("time");

                    b.HasKey("ContentId");

                    b.HasIndex("CustomTravelId");

                    b.ToTable("T_Content", (string)null);
                });

            modelBuilder.Entity("TravelAgencyBackend.Models.CustomTravel", b =>
                {
                    b.Property<int>("CustomTravelId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CustomTravelId"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<int>("Days")
                        .HasColumnType("int");

                    b.Property<DateTime>("DepartureDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime");

                    b.Property<int>("MemberId")
                        .HasColumnType("int");

                    b.Property<string>("Note")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("People")
                        .HasColumnType("int");

                    b.Property<int?>("ReviewEmployeeId")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.HasKey("CustomTravelId");

                    b.HasIndex("MemberId");

                    b.HasIndex("ReviewEmployeeId");

                    b.ToTable("T_CustomTravel", (string)null);
                });

            modelBuilder.Entity("TravelAgencyBackend.Models.District", b =>
                {
                    b.Property<int>("DistrictId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DistrictId"));

                    b.Property<int>("CityId")
                        .HasColumnType("int");

                    b.Property<string>("DistrictName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("DistrictId");

                    b.HasIndex("CityId", "DistrictName")
                        .IsUnique();

                    b.ToTable("S_District", (string)null);
                });

            modelBuilder.Entity("TravelAgencyBackend.Models.Employee", b =>
                {
                    b.Property<int>("EmployeeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EmployeeId"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("date");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<DateTime>("HireDate")
                        .HasColumnType("date");

                    b.Property<string>("ImagePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Note")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("EmployeeId");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("Phone")
                        .IsUnique();

                    b.HasIndex("RoleId");

                    b.ToTable("T_Employee", (string)null);
                });

            modelBuilder.Entity("TravelAgencyBackend.Models.Flight", b =>
                {
                    b.Property<int>("FlightId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FlightId"));

                    b.Property<string>("AircraftType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("AirlineCode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("AirlineName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ArrivalAirportCode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("ArrivalAirportName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("ArrivalTime")
                        .HasColumnType("datetime");

                    b.Property<string>("DepartureAirportCode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("DepartureAirportName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("DepartureTime")
                        .HasColumnType("datetime");

                    b.Property<string>("FlightUid")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime>("SyncedAt")
                        .HasColumnType("datetime");

                    b.HasKey("FlightId");

                    b.HasIndex("FlightUid")
                        .IsUnique();

                    b.ToTable("T_Flight", (string)null);
                });

            modelBuilder.Entity("TravelAgencyBackend.Models.Hotel", b =>
                {
                    b.Property<int>("HotelId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("HotelId"));

                    b.Property<int>("DistrictId")
                        .HasColumnType("int");

                    b.Property<string>("HotelName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("TravelSupplierId")
                        .HasColumnType("int");

                    b.HasKey("HotelId");

                    b.HasIndex("TravelSupplierId");

                    b.HasIndex("DistrictId", "HotelName")
                        .IsUnique();

                    b.ToTable("T_Hotel", (string)null);
                });

            modelBuilder.Entity("TravelAgencyBackend.Models.Member", b =>
                {
                    b.Property<int>("MemberId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MemberId"));

                    b.Property<string>("Account")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Note")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.HasKey("MemberId");

                    b.HasIndex("Account")
                        .IsUnique();

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("Phone")
                        .IsUnique();

                    b.ToTable("T_Member", (string)null);
                });

            modelBuilder.Entity("TravelAgencyBackend.Models.Message", b =>
                {
                    b.Property<int>("MessageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MessageId"));

                    b.Property<int>("ChatRoomId")
                        .HasColumnType("int");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<bool>("IsRead")
                        .HasColumnType("bit");

                    b.Property<int>("SenderId")
                        .HasColumnType("int");

                    b.Property<string>("SenderType")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime>("SentAt")
                        .HasColumnType("datetime");

                    b.HasKey("MessageId");

                    b.HasIndex("ChatRoomId");

                    b.ToTable("T_Message", (string)null);
                });

            modelBuilder.Entity("TravelAgencyBackend.Models.OfficialTravel", b =>
                {
                    b.Property<int>("OfficialTravelId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OfficialTravelId"));

                    b.Property<DateTime>("AvailableFrom")
                        .HasColumnType("date");

                    b.Property<DateTime>("AvailableUntil")
                        .HasColumnType("date");

                    b.Property<string>("CoverPath")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<int>("CreatedByEmployeeId")
                        .HasColumnType("int");

                    b.Property<int>("Days")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int>("ProjectYear")
                        .HasColumnType("int");

                    b.Property<int>("RegionId")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.HasKey("OfficialTravelId");

                    b.HasIndex("CreatedByEmployeeId");

                    b.HasIndex("RegionId");

                    b.ToTable("T_OfficialTravel", (string)null);
                });

            modelBuilder.Entity("TravelAgencyBackend.Models.OfficialTravelDetail", b =>
                {
                    b.Property<int>("OfficialTravelDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OfficialTravelDetailId"));

                    b.Property<DateTime>("BookingDeadline")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("DepartureDate")
                        .HasColumnType("datetime");

                    b.Property<int>("FlightId")
                        .HasColumnType("int");

                    b.Property<string>("GroupStatus")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("MinimumGroupSize")
                        .HasColumnType("int");

                    b.Property<int>("OfficialTravelId")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("ReturnDate")
                        .HasColumnType("datetime");

                    b.Property<int>("Seats")
                        .HasColumnType("int");

                    b.Property<int>("SoldSeats")
                        .HasColumnType("int");

                    b.Property<int?>("TravelSupplierId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.HasKey("OfficialTravelDetailId");

                    b.HasIndex("FlightId");

                    b.HasIndex("OfficialTravelId");

                    b.HasIndex("TravelSupplierId");

                    b.ToTable("T_OfficialTravelDetail", (string)null);
                });

            modelBuilder.Entity("TravelAgencyBackend.Models.OfficialTravelSchedule", b =>
                {
                    b.Property<int>("OfficialTravelScheduleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OfficialTravelScheduleId"));

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<DateTime?>("Date")
                        .HasColumnType("date");

                    b.Property<int>("Day")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int>("ItemId")
                        .HasColumnType("int");

                    b.Property<string>("Note1")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Note2")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("OfficialTravelDetailId")
                        .HasColumnType("int");

                    b.Property<TimeSpan>("StartTime")
                        .HasColumnType("time");

                    b.HasKey("OfficialTravelScheduleId");

                    b.HasIndex("OfficialTravelDetailId");

                    b.ToTable("T_OfficialTravelSchedule", (string)null);
                });

            modelBuilder.Entity("TravelAgencyBackend.Models.Order", b =>
                {
                    b.Property<int>("OrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrderId"));

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<int?>("CustomTravelId")
                        .HasColumnType("int");

                    b.Property<int>("ItemId")
                        .HasColumnType("int");

                    b.Property<int>("MemberId")
                        .HasColumnType("int");

                    b.Property<string>("Note")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int?>("OfficialTravelDetailId")
                        .HasColumnType("int");

                    b.Property<int>("ParticipantId")
                        .HasColumnType("int");

                    b.Property<int>("ParticipantsCount")
                        .HasColumnType("int");

                    b.Property<DateTime?>("PaymentDate")
                        .HasColumnType("datetime");

                    b.Property<string>("PaymentMethod")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("OrderId");

                    b.HasIndex("CustomTravelId");

                    b.HasIndex("MemberId");

                    b.HasIndex("OfficialTravelDetailId");

                    b.HasIndex("ParticipantId");

                    b.ToTable("T_Order", (string)null);
                });

            modelBuilder.Entity("TravelAgencyBackend.Models.Participant", b =>
                {
                    b.Property<int>("ParticipantId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ParticipantId"));

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("date");

                    b.Property<string>("EnglishName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("IdNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("IssuedPlace")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("MemberId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("PassportIssueDate")
                        .HasColumnType("date");

                    b.Property<string>("PassportNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("ParticipantId");

                    b.HasIndex("IdNumber")
                        .IsUnique();

                    b.HasIndex("MemberId");

                    b.HasIndex("PassportNumber")
                        .IsUnique();

                    b.HasIndex("Phone")
                        .IsUnique();

                    b.ToTable("T_Participant", (string)null);
                });

            modelBuilder.Entity("TravelAgencyBackend.Models.Permission", b =>
                {
                    b.Property<int>("PermissionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PermissionId"));

                    b.Property<string>("PermissionName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("PermissionId");

                    b.ToTable("T_Permission", (string)null);
                });

            modelBuilder.Entity("TravelAgencyBackend.Models.Region", b =>
                {
                    b.Property<int>("RegionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RegionId"));

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("RegionId");

                    b.ToTable("T_Region", (string)null);
                });

            modelBuilder.Entity("TravelAgencyBackend.Models.Restaurant", b =>
                {
                    b.Property<int>("RestaurantId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RestaurantId"));

                    b.Property<int>("DistrictId")
                        .HasColumnType("int");

                    b.Property<string>("RestaurantName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("TravelSupplierId")
                        .HasColumnType("int");

                    b.HasKey("RestaurantId");

                    b.HasIndex("TravelSupplierId");

                    b.HasIndex("DistrictId", "RestaurantName")
                        .IsUnique();

                    b.ToTable("T_Restaurant", (string)null);
                });

            modelBuilder.Entity("TravelAgencyBackend.Models.Role", b =>
                {
                    b.Property<int>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RoleId"));

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("RoleId");

                    b.ToTable("T_Role", (string)null);
                });

            modelBuilder.Entity("TravelAgencyBackend.Models.RolePermission", b =>
                {
                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<int>("PermissionId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.HasKey("RoleId", "PermissionId");

                    b.HasIndex("PermissionId");

                    b.ToTable("M_RolePermission", (string)null);
                });

            modelBuilder.Entity("TravelAgencyBackend.Models.Transportation", b =>
                {
                    b.Property<int>("TransportId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TransportId"));

                    b.Property<string>("TransportMethod")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("TransportId");

                    b.HasIndex("TransportMethod")
                        .IsUnique();

                    b.ToTable("S_Transport", (string)null);
                });

            modelBuilder.Entity("TravelAgencyBackend.Models.TravelRecord", b =>
                {
                    b.Property<int>("TravelRecordId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TravelRecordId"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("TotalParticipants")
                        .HasColumnType("int");

                    b.HasKey("TravelRecordId");

                    b.HasIndex("OrderId");

                    b.ToTable("T_TravelRecord", (string)null);
                });

            modelBuilder.Entity("TravelAgencyBackend.Models.TravelSupplier", b =>
                {
                    b.Property<int>("TravelSupplierId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TravelSupplierId"));

                    b.Property<string>("ContactEmail")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ContactName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ContactPhone")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Note")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("SupplierName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("SupplierType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("TravelSupplierId");

                    b.HasIndex("SupplierName")
                        .IsUnique();

                    b.ToTable("T_TravelSupplier", (string)null);
                });

            modelBuilder.Entity("TravelAgencyBackend.Models.Announcement", b =>
                {
                    b.HasOne("TravelAgencyBackend.Models.Employee", "Employee")
                        .WithMany("Announcements")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("TravelAgencyBackend.Models.Attraction", b =>
                {
                    b.HasOne("TravelAgencyBackend.Models.District", "District")
                        .WithMany("Attractions")
                        .HasForeignKey("DistrictId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("TravelAgencyBackend.Models.TravelSupplier", "TravelSupplier")
                        .WithMany("Attractions")
                        .HasForeignKey("TravelSupplierId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("District");

                    b.Navigation("TravelSupplier");
                });

            modelBuilder.Entity("TravelAgencyBackend.Models.Cart", b =>
                {
                    b.HasOne("TravelAgencyBackend.Models.Member", "Member")
                        .WithMany("Carts")
                        .HasForeignKey("MemberId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Member");
                });

            modelBuilder.Entity("TravelAgencyBackend.Models.ChatRoom", b =>
                {
                    b.HasOne("TravelAgencyBackend.Models.Employee", "Employee")
                        .WithMany("ChatRooms")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("TravelAgencyBackend.Models.Member", "Member")
                        .WithOne("ChatRoom")
                        .HasForeignKey("TravelAgencyBackend.Models.ChatRoom", "MemberId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Employee");

                    b.Navigation("Member");
                });

            modelBuilder.Entity("TravelAgencyBackend.Models.Content", b =>
                {
                    b.HasOne("TravelAgencyBackend.Models.CustomTravel", "CustomTravel")
                        .WithMany("Contents")
                        .HasForeignKey("CustomTravelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CustomTravel");
                });

            modelBuilder.Entity("TravelAgencyBackend.Models.CustomTravel", b =>
                {
                    b.HasOne("TravelAgencyBackend.Models.Member", "Member")
                        .WithMany("CustomTravels")
                        .HasForeignKey("MemberId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("TravelAgencyBackend.Models.Employee", "ReviewEmployee")
                        .WithMany("ReviewedCustomTravels")
                        .HasForeignKey("ReviewEmployeeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Member");

                    b.Navigation("ReviewEmployee");
                });

            modelBuilder.Entity("TravelAgencyBackend.Models.District", b =>
                {
                    b.HasOne("TravelAgencyBackend.Models.City", "City")
                        .WithMany("Districts")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("City");
                });

            modelBuilder.Entity("TravelAgencyBackend.Models.Employee", b =>
                {
                    b.HasOne("TravelAgencyBackend.Models.Role", "Role")
                        .WithMany("Employees")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("TravelAgencyBackend.Models.Hotel", b =>
                {
                    b.HasOne("TravelAgencyBackend.Models.District", "District")
                        .WithMany("Hotels")
                        .HasForeignKey("DistrictId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("TravelAgencyBackend.Models.TravelSupplier", "TravelSupplier")
                        .WithMany("Hotels")
                        .HasForeignKey("TravelSupplierId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("District");

                    b.Navigation("TravelSupplier");
                });

            modelBuilder.Entity("TravelAgencyBackend.Models.Message", b =>
                {
                    b.HasOne("TravelAgencyBackend.Models.ChatRoom", "ChatRoom")
                        .WithMany("Messages")
                        .HasForeignKey("ChatRoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ChatRoom");
                });

            modelBuilder.Entity("TravelAgencyBackend.Models.OfficialTravel", b =>
                {
                    b.HasOne("TravelAgencyBackend.Models.Employee", "CreatedBy")
                        .WithMany("OfficialTravels")
                        .HasForeignKey("CreatedByEmployeeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("TravelAgencyBackend.Models.Region", "Region")
                        .WithMany("OfficialTravels")
                        .HasForeignKey("RegionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CreatedBy");

                    b.Navigation("Region");
                });

            modelBuilder.Entity("TravelAgencyBackend.Models.OfficialTravelDetail", b =>
                {
                    b.HasOne("TravelAgencyBackend.Models.Flight", "Flight")
                        .WithMany("OfficialTravelDetails")
                        .HasForeignKey("FlightId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("TravelAgencyBackend.Models.OfficialTravel", "OfficialTravel")
                        .WithMany("Details")
                        .HasForeignKey("OfficialTravelId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("TravelAgencyBackend.Models.TravelSupplier", null)
                        .WithMany("OfficialTravelDetails")
                        .HasForeignKey("TravelSupplierId");

                    b.Navigation("Flight");

                    b.Navigation("OfficialTravel");
                });

            modelBuilder.Entity("TravelAgencyBackend.Models.OfficialTravelSchedule", b =>
                {
                    b.HasOne("TravelAgencyBackend.Models.OfficialTravelDetail", "OfficialTravelDetail")
                        .WithMany("Schedules")
                        .HasForeignKey("OfficialTravelDetailId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("OfficialTravelDetail");
                });

            modelBuilder.Entity("TravelAgencyBackend.Models.Order", b =>
                {
                    b.HasOne("TravelAgencyBackend.Models.CustomTravel", "CustomTravel")
                        .WithMany()
                        .HasForeignKey("CustomTravelId");

                    b.HasOne("TravelAgencyBackend.Models.Member", "Member")
                        .WithMany("Orders")
                        .HasForeignKey("MemberId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("TravelAgencyBackend.Models.OfficialTravelDetail", "OfficialTravelDetail")
                        .WithMany()
                        .HasForeignKey("OfficialTravelDetailId");

                    b.HasOne("TravelAgencyBackend.Models.Participant", "Participant")
                        .WithMany("Orders")
                        .HasForeignKey("ParticipantId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CustomTravel");

                    b.Navigation("Member");

                    b.Navigation("OfficialTravelDetail");

                    b.Navigation("Participant");
                });

            modelBuilder.Entity("TravelAgencyBackend.Models.Participant", b =>
                {
                    b.HasOne("TravelAgencyBackend.Models.Member", "Member")
                        .WithMany("Participants")
                        .HasForeignKey("MemberId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Member");
                });

            modelBuilder.Entity("TravelAgencyBackend.Models.Restaurant", b =>
                {
                    b.HasOne("TravelAgencyBackend.Models.District", "District")
                        .WithMany("Restaurants")
                        .HasForeignKey("DistrictId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("TravelAgencyBackend.Models.TravelSupplier", "TravelSupplier")
                        .WithMany("Restaurants")
                        .HasForeignKey("TravelSupplierId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("District");

                    b.Navigation("TravelSupplier");
                });

            modelBuilder.Entity("TravelAgencyBackend.Models.RolePermission", b =>
                {
                    b.HasOne("TravelAgencyBackend.Models.Permission", "Permission")
                        .WithMany("RolePermissions")
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TravelAgencyBackend.Models.Role", "Role")
                        .WithMany("RolePermissions")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Permission");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("TravelAgencyBackend.Models.TravelRecord", b =>
                {
                    b.HasOne("TravelAgencyBackend.Models.Order", "Order")
                        .WithMany("TravelRecords")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");
                });

            modelBuilder.Entity("TravelAgencyBackend.Models.ChatRoom", b =>
                {
                    b.Navigation("Messages");
                });

            modelBuilder.Entity("TravelAgencyBackend.Models.City", b =>
                {
                    b.Navigation("Districts");
                });

            modelBuilder.Entity("TravelAgencyBackend.Models.CustomTravel", b =>
                {
                    b.Navigation("Contents");
                });

            modelBuilder.Entity("TravelAgencyBackend.Models.District", b =>
                {
                    b.Navigation("Attractions");

                    b.Navigation("Hotels");

                    b.Navigation("Restaurants");
                });

            modelBuilder.Entity("TravelAgencyBackend.Models.Employee", b =>
                {
                    b.Navigation("Announcements");

                    b.Navigation("ChatRooms");

                    b.Navigation("OfficialTravels");

                    b.Navigation("ReviewedCustomTravels");
                });

            modelBuilder.Entity("TravelAgencyBackend.Models.Flight", b =>
                {
                    b.Navigation("OfficialTravelDetails");
                });

            modelBuilder.Entity("TravelAgencyBackend.Models.Member", b =>
                {
                    b.Navigation("Carts");

                    b.Navigation("ChatRoom");

                    b.Navigation("CustomTravels");

                    b.Navigation("Orders");

                    b.Navigation("Participants");
                });

            modelBuilder.Entity("TravelAgencyBackend.Models.OfficialTravel", b =>
                {
                    b.Navigation("Details");
                });

            modelBuilder.Entity("TravelAgencyBackend.Models.OfficialTravelDetail", b =>
                {
                    b.Navigation("Schedules");
                });

            modelBuilder.Entity("TravelAgencyBackend.Models.Order", b =>
                {
                    b.Navigation("TravelRecords");
                });

            modelBuilder.Entity("TravelAgencyBackend.Models.Participant", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("TravelAgencyBackend.Models.Permission", b =>
                {
                    b.Navigation("RolePermissions");
                });

            modelBuilder.Entity("TravelAgencyBackend.Models.Region", b =>
                {
                    b.Navigation("OfficialTravels");
                });

            modelBuilder.Entity("TravelAgencyBackend.Models.Role", b =>
                {
                    b.Navigation("Employees");

                    b.Navigation("RolePermissions");
                });

            modelBuilder.Entity("TravelAgencyBackend.Models.TravelSupplier", b =>
                {
                    b.Navigation("Attractions");

                    b.Navigation("Hotels");

                    b.Navigation("OfficialTravelDetails");

                    b.Navigation("Restaurants");
                });
#pragma warning restore 612, 618
        }
    }
}
